CCS PCM C Compiler, Version 5.115, 43599               28-Feb-25 19:16

               Filename:   D:\Embedded\Projects\PIC16F877A\Hien thi giay lcd\main.lst

               ROM used:   579 words (7%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           23 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   204
0003:  NOP
.................... 
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0004:  DATA 3A,00
0005:  DATA 43,26
0006:  DATA CF,21
0007:  DATA 4B,1D
0008:  DATA 00,01
0009:  DATA C8,27
000A:  DATA 20,2A
000B:  DATA C8,20
000C:  DATA 4E,24
000D:  DATA 20,26
000E:  DATA C9,22
000F:  DATA 4D,00
*
0162:  MOVF   0B,W
0163:  MOVWF  24
0164:  BCF    0B.7
0165:  BSF    03.5
0166:  BSF    03.6
0167:  BSF    0C.7
0168:  BSF    0C.0
0169:  NOP
016A:  NOP
016B:  BCF    03.5
016C:  BCF    03.6
016D:  BTFSC  24.7
016E:  BSF    0B.7
016F:  BSF    03.6
0170:  MOVF   0C,W
0171:  ANDLW  7F
0172:  BTFSC  03.2
0173:  GOTO   1B6
0174:  BCF    03.6
0175:  MOVWF  24
0176:  BSF    03.6
0177:  MOVF   0D,W
0178:  BCF    03.6
0179:  MOVWF  25
017A:  BSF    03.6
017B:  MOVF   0F,W
017C:  BCF    03.6
017D:  MOVWF  26
017E:  MOVF   24,W
017F:  MOVWF  27
0180:  CALL   136
0181:  MOVF   25,W
0182:  BSF    03.6
0183:  MOVWF  0D
0184:  BCF    03.6
0185:  MOVF   26,W
0186:  BSF    03.6
0187:  MOVWF  0F
0188:  BCF    03.6
0189:  MOVF   0B,W
018A:  MOVWF  27
018B:  BCF    0B.7
018C:  BSF    03.5
018D:  BSF    03.6
018E:  BSF    0C.7
018F:  BSF    0C.0
0190:  NOP
0191:  NOP
0192:  BCF    03.5
0193:  BCF    03.6
0194:  BTFSC  27.7
0195:  BSF    0B.7
0196:  BSF    03.6
0197:  RLF    0C,W
0198:  RLF    0E,W
0199:  ANDLW  7F
019A:  BTFSC  03.2
019B:  GOTO   1B6
019C:  BCF    03.6
019D:  MOVWF  24
019E:  BSF    03.6
019F:  MOVF   0D,W
01A0:  BCF    03.6
01A1:  MOVWF  25
01A2:  BSF    03.6
01A3:  MOVF   0F,W
01A4:  BCF    03.6
01A5:  MOVWF  26
01A6:  MOVF   24,W
01A7:  MOVWF  27
01A8:  CALL   136
01A9:  MOVF   25,W
01AA:  BSF    03.6
01AB:  MOVWF  0D
01AC:  BCF    03.6
01AD:  MOVF   26,W
01AE:  BSF    03.6
01AF:  MOVWF  0F
01B0:  INCF   0D,F
01B1:  BTFSC  03.2
01B2:  INCF   0F,F
01B3:  BCF    03.6
01B4:  GOTO   162
01B5:  BSF    03.6
01B6:  BCF    03.6
01B7:  RETURN
01B8:  MOVF   25,W
01B9:  CLRF   78
01BA:  SUBWF  24,W
01BB:  BTFSC  03.0
01BC:  GOTO   1C0
01BD:  MOVF   24,W
01BE:  MOVWF  77
01BF:  GOTO   1CC
01C0:  CLRF   77
01C1:  MOVLW  08
01C2:  MOVWF  26
01C3:  RLF    24,F
01C4:  RLF    77,F
01C5:  MOVF   25,W
01C6:  SUBWF  77,W
01C7:  BTFSC  03.0
01C8:  MOVWF  77
01C9:  RLF    78,F
01CA:  DECFSZ 26,F
01CB:  GOTO   1C3
01CC:  RETURN
.................... 
.................... #list
.................... 
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP
.................... #use delay(clock = 6MHz)
*
0010:  MOVLW  29
0011:  MOVWF  04
0012:  BCF    03.7
0013:  MOVF   00,W
0014:  BTFSC  03.2
0015:  GOTO   024
0016:  MOVLW  01
0017:  MOVWF  78
0018:  CLRF   77
0019:  DECFSZ 77,F
001A:  GOTO   019
001B:  DECFSZ 78,F
001C:  GOTO   018
001D:  MOVLW  F1
001E:  MOVWF  77
001F:  DECFSZ 77,F
0020:  GOTO   01F
0021:  NOP
0022:  DECFSZ 00,F
0023:  GOTO   016
0024:  RETURN
.................... #define LCD_ENABLE_PIN  PIN_A3
.................... #define LCD_RS_PIN      PIN_A5
.................... #define LCD_RW_PIN      PIN_A4
.................... #define LCD_DATA4       PIN_D4
.................... #define LCD_DATA5       PIN_D5
.................... #define LCD_DATA6       PIN_D6
.................... #define LCD_DATA7       PIN_D7 
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
008A:  BSF    08.4
....................    output_float(LCD_DATA5);
008B:  BSF    08.5
....................    output_float(LCD_DATA6);
008C:  BSF    08.6
....................    output_float(LCD_DATA7);
008D:  BSF    08.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
008E:  BCF    03.5
008F:  BSF    05.4
0090:  BSF    03.5
0091:  BCF    05.4
....................    delay_cycles(1);
0092:  NOP
....................    lcd_output_enable(1);
0093:  BCF    03.5
0094:  BSF    05.3
0095:  BSF    03.5
0096:  BCF    05.3
....................    delay_cycles(1);
0097:  NOP
....................    high = lcd_read_nibble();
0098:  BCF    03.5
0099:  CALL   051
009A:  MOVF   78,W
009B:  MOVWF  2F
....................       
....................    lcd_output_enable(0);
009C:  BCF    05.3
009D:  BSF    03.5
009E:  BCF    05.3
....................    delay_cycles(1);
009F:  NOP
....................    lcd_output_enable(1);
00A0:  BCF    03.5
00A1:  BSF    05.3
00A2:  BSF    03.5
00A3:  BCF    05.3
....................    delay_us(1);
00A4:  NOP
....................    low = lcd_read_nibble();
00A5:  BCF    03.5
00A6:  CALL   051
00A7:  MOVF   78,W
00A8:  MOVWF  2E
....................       
....................    lcd_output_enable(0);
00A9:  BCF    05.3
00AA:  BSF    03.5
00AB:  BCF    05.3
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00AC:  BCF    08.4
....................    output_drive(LCD_DATA5);
00AD:  BCF    08.5
....................    output_drive(LCD_DATA6);
00AE:  BCF    08.6
....................    output_drive(LCD_DATA7);
00AF:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00B0:  BCF    03.5
00B1:  SWAPF  2F,W
00B2:  MOVWF  77
00B3:  MOVLW  F0
00B4:  ANDWF  77,F
00B5:  MOVF   77,W
00B6:  IORWF  2E,W
00B7:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
0051:  CLRF   30
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
0052:  BSF    03.5
0053:  BSF    08.4
0054:  MOVLW  00
0055:  BCF    03.5
0056:  BTFSC  08.4
0057:  MOVLW  01
0058:  IORWF  30,F
....................    n |= input(LCD_DATA5) << 1;
0059:  BSF    03.5
005A:  BSF    08.5
005B:  MOVLW  00
005C:  BCF    03.5
005D:  BTFSC  08.5
005E:  MOVLW  01
005F:  MOVWF  77
0060:  BCF    03.0
0061:  RLF    77,F
0062:  MOVF   77,W
0063:  IORWF  30,F
....................    n |= input(LCD_DATA6) << 2;
0064:  BSF    03.5
0065:  BSF    08.6
0066:  MOVLW  00
0067:  BCF    03.5
0068:  BTFSC  08.6
0069:  MOVLW  01
006A:  MOVWF  77
006B:  RLF    77,F
006C:  RLF    77,F
006D:  MOVLW  FC
006E:  ANDWF  77,F
006F:  MOVF   77,W
0070:  IORWF  30,F
....................    n |= input(LCD_DATA7) << 3;
0071:  BSF    03.5
0072:  BSF    08.7
0073:  MOVLW  00
0074:  BCF    03.5
0075:  BTFSC  08.7
0076:  MOVLW  01
0077:  MOVWF  77
0078:  RLF    77,F
0079:  RLF    77,F
007A:  RLF    77,F
007B:  MOVLW  F8
007C:  ANDWF  77,F
007D:  MOVF   77,W
007E:  IORWF  30,F
....................    
....................    return(n);
007F:  MOVF   30,W
0080:  MOVWF  78
....................   #else
0081:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
0025:  BTFSC  2F.0
0026:  GOTO   029
0027:  BCF    08.4
0028:  GOTO   02A
0029:  BSF    08.4
002A:  BSF    03.5
002B:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1));
002C:  BCF    03.5
002D:  BTFSC  2F.1
002E:  GOTO   031
002F:  BCF    08.5
0030:  GOTO   032
0031:  BSF    08.5
0032:  BSF    03.5
0033:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2));
0034:  BCF    03.5
0035:  BTFSC  2F.2
0036:  GOTO   039
0037:  BCF    08.6
0038:  GOTO   03A
0039:  BSF    08.6
003A:  BSF    03.5
003B:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3));
003C:  BCF    03.5
003D:  BTFSC  2F.3
003E:  GOTO   041
003F:  BCF    08.7
0040:  GOTO   042
0041:  BSF    08.7
0042:  BSF    03.5
0043:  BCF    08.7
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
0044:  NOP
....................    lcd_output_enable(1);
0045:  BCF    03.5
0046:  BSF    05.3
0047:  BSF    03.5
0048:  BCF    05.3
....................    delay_us(2);
0049:  GOTO   04A
004A:  NOP
....................    lcd_output_enable(0);
004B:  BCF    03.5
004C:  BCF    05.3
004D:  BSF    03.5
004E:  BCF    05.3
004F:  BCF    03.5
0050:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0082:  BSF    03.5
0083:  BCF    05.3
....................    lcd_rs_tris();
0084:  BCF    05.5
....................    lcd_rw_tris();
0085:  BCF    05.4
....................   #endif
.................... 
....................    lcd_output_rs(0);
0086:  BCF    03.5
0087:  BCF    05.5
0088:  BSF    03.5
0089:  BCF    05.5
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
00B8:  MOVF   78,W
00B9:  MOVWF  2E
00BA:  BTFSS  2E.7
00BB:  GOTO   0BE
00BC:  BSF    03.5
00BD:  GOTO   08A
....................    lcd_output_rs(address);
00BE:  MOVF   2C,F
00BF:  BTFSS  03.2
00C0:  GOTO   0C3
00C1:  BCF    05.5
00C2:  GOTO   0C4
00C3:  BSF    05.5
00C4:  BSF    03.5
00C5:  BCF    05.5
....................    delay_cycles(1);
00C6:  NOP
....................    lcd_output_rw(0);
00C7:  BCF    03.5
00C8:  BCF    05.4
00C9:  BSF    03.5
00CA:  BCF    05.4
....................    delay_cycles(1);
00CB:  NOP
....................    lcd_output_enable(0);
00CC:  BCF    03.5
00CD:  BCF    05.3
00CE:  BSF    03.5
00CF:  BCF    05.3
....................    lcd_send_nibble(n >> 4);
00D0:  BCF    03.5
00D1:  SWAPF  2D,W
00D2:  MOVWF  2E
00D3:  MOVLW  0F
00D4:  ANDWF  2E,F
00D5:  MOVF   2E,W
00D6:  MOVWF  2F
00D7:  CALL   025
....................    lcd_send_nibble(n & 0xf);
00D8:  MOVF   2D,W
00D9:  ANDLW  0F
00DA:  MOVWF  2E
00DB:  MOVWF  2F
00DC:  CALL   025
00DD:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
00DE:  MOVLW  28
00DF:  MOVWF  25
00E0:  MOVLW  0C
00E1:  MOVWF  26
00E2:  MOVLW  01
00E3:  MOVWF  27
00E4:  MOVLW  06
00E5:  MOVWF  28
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
00E6:  BCF    05.3
00E7:  BSF    03.5
00E8:  BCF    05.3
....................    lcd_output_rs(0);
00E9:  BCF    03.5
00EA:  BCF    05.5
00EB:  BSF    03.5
00EC:  BCF    05.5
....................    lcd_output_rw(0);
00ED:  BCF    03.5
00EE:  BCF    05.4
00EF:  BSF    03.5
00F0:  BCF    05.4
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00F1:  BCF    08.4
....................    output_drive(LCD_DATA5);
00F2:  BCF    08.5
....................    output_drive(LCD_DATA6);
00F3:  BCF    08.6
....................    output_drive(LCD_DATA7);
00F4:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
00F5:  BCF    05.3
....................    lcd_rs_tris();
00F6:  BCF    05.5
....................    lcd_rw_tris();
00F7:  BCF    05.4
....................  #endif
....................     
....................    delay_ms(15);
00F8:  MOVLW  0F
00F9:  BCF    03.5
00FA:  MOVWF  29
00FB:  CALL   010
....................    for(i=1;i<=3;++i)
00FC:  MOVLW  01
00FD:  MOVWF  24
00FE:  MOVF   24,W
00FF:  SUBLW  03
0100:  BTFSS  03.0
0101:  GOTO   10A
....................    {
....................        lcd_send_nibble(3);
0102:  MOVLW  03
0103:  MOVWF  2F
0104:  CALL   025
....................        delay_ms(5);
0105:  MOVLW  05
0106:  MOVWF  29
0107:  CALL   010
0108:  INCF   24,F
0109:  GOTO   0FE
....................    }
....................    
....................    lcd_send_nibble(2);
010A:  MOVLW  02
010B:  MOVWF  2F
010C:  CALL   025
....................    delay_ms(5);
010D:  MOVLW  05
010E:  MOVWF  29
010F:  CALL   010
....................    for(i=0;i<=3;++i)
0110:  CLRF   24
0111:  MOVF   24,W
0112:  SUBLW  03
0113:  BTFSS  03.0
0114:  GOTO   121
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
0115:  MOVLW  25
0116:  ADDWF  24,W
0117:  MOVWF  04
0118:  BCF    03.7
0119:  MOVF   00,W
011A:  MOVWF  29
011B:  CLRF   2C
011C:  MOVF   29,W
011D:  MOVWF  2D
011E:  CALL   082
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
011F:  INCF   24,F
0120:  GOTO   111
0121:  BCF    0A.3
0122:  BCF    0A.4
0123:  GOTO   213 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
0124:  DECFSZ 29,W
0125:  GOTO   127
0126:  GOTO   12A
....................       address=LCD_LINE_TWO;
0127:  MOVLW  40
0128:  MOVWF  2A
0129:  GOTO   12B
....................    else
....................       address=0;
012A:  CLRF   2A
....................      
....................    address+=x-1;
012B:  MOVLW  01
012C:  SUBWF  28,W
012D:  ADDWF  2A,F
....................    lcd_send_byte(0,0x80|address);
012E:  MOVF   2A,W
012F:  IORLW  80
0130:  MOVWF  2B
0131:  CLRF   2C
0132:  MOVF   2B,W
0133:  MOVWF  2D
0134:  CALL   082
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0135:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0136:  MOVF   27,W
0137:  XORLW  07
0138:  BTFSC  03.2
0139:  GOTO   144
013A:  XORLW  0B
013B:  BTFSC  03.2
013C:  GOTO   149
013D:  XORLW  06
013E:  BTFSC  03.2
013F:  GOTO   151
0140:  XORLW  02
0141:  BTFSC  03.2
0142:  GOTO   157
0143:  GOTO   15C
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
0144:  MOVLW  01
0145:  MOVWF  28
0146:  MOVWF  29
0147:  CALL   124
0148:  GOTO   161
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0149:  CLRF   2C
014A:  MOVLW  01
014B:  MOVWF  2D
014C:  CALL   082
....................                      delay_ms(2);
014D:  MOVLW  02
014E:  MOVWF  29
014F:  CALL   010
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
0150:  GOTO   161
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
0151:  MOVLW  01
0152:  MOVWF  28
0153:  MOVLW  02
0154:  MOVWF  29
0155:  CALL   124
0156:  GOTO   161
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0157:  CLRF   2C
0158:  MOVLW  10
0159:  MOVWF  2D
015A:  CALL   082
015B:  GOTO   161
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
015C:  MOVLW  01
015D:  MOVWF  2C
015E:  MOVF   27,W
015F:  MOVWF  2D
0160:  CALL   082
....................      #endif
....................    }
0161:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... unsigned int phut,giay;
.................... 
.................... void lcd_hienthi() 
.................... {
....................    lcd_gotoxy (12, 1);
*
01CD:  MOVLW  0C
01CE:  MOVWF  28
01CF:  MOVLW  01
01D0:  MOVWF  29
01D1:  CALL   124
....................    lcd_putc ((phut / 10) + 0x30);
01D2:  MOVF   20,W
01D3:  MOVWF  24
01D4:  MOVLW  0A
01D5:  MOVWF  25
01D6:  CALL   1B8
01D7:  MOVLW  30
01D8:  ADDWF  78,W
01D9:  MOVWF  24
01DA:  MOVWF  27
01DB:  CALL   136
....................    lcd_putc ((phut % 10) + 0x30);
01DC:  MOVF   20,W
01DD:  MOVWF  24
01DE:  MOVLW  0A
01DF:  MOVWF  25
01E0:  CALL   1B8
01E1:  MOVLW  30
01E2:  ADDWF  77,W
01E3:  MOVWF  24
01E4:  MOVWF  27
01E5:  CALL   136
....................    lcd_putc (":") ;
01E6:  MOVLW  04
01E7:  BSF    03.6
01E8:  MOVWF  0D
01E9:  MOVLW  00
01EA:  MOVWF  0F
01EB:  BCF    03.6
01EC:  CALL   162
....................    lcd_putc ((giay / 10) + 0x30);
01ED:  MOVF   21,W
01EE:  MOVWF  24
01EF:  MOVLW  0A
01F0:  MOVWF  25
01F1:  CALL   1B8
01F2:  MOVLW  30
01F3:  ADDWF  78,W
01F4:  MOVWF  24
01F5:  MOVWF  27
01F6:  CALL   136
....................    lcd_putc ((giay % 10) + 0x30);
01F7:  MOVF   21,W
01F8:  MOVWF  24
01F9:  MOVLW  0A
01FA:  MOVWF  25
01FB:  CALL   1B8
01FC:  MOVLW  30
01FD:  ADDWF  77,W
01FE:  MOVWF  24
01FF:  MOVWF  27
0200:  CALL   136
0201:  BCF    0A.3
0202:  BCF    0A.4
0203:  GOTO   22F (RETURN)
.................... }
.................... 
.................... void main()
0204:  MOVF   03,W
0205:  ANDLW  1F
0206:  MOVWF  03
0207:  CLRF   23
0208:  CLRF   22
0209:  BSF    03.5
020A:  BSF    1F.0
020B:  BSF    1F.1
020C:  BSF    1F.2
020D:  BCF    1F.3
020E:  MOVLW  07
020F:  MOVWF  1C
0210:  BCF    03.7
.................... {
....................    lcd_init ();
0211:  BCF    03.5
0212:  GOTO   0DE
....................    lcd_putc ('\f'); // Clear LCD
0213:  MOVLW  0C
0214:  MOVWF  27
0215:  CALL   136
....................    lcd_gotoxy (1, 1) ;
0216:  MOVLW  01
0217:  MOVWF  28
0218:  MOVWF  29
0219:  CALL   124
....................    lcd_putc ("CLOCK:");
021A:  MOVLW  05
021B:  BSF    03.6
021C:  MOVWF  0D
021D:  MOVLW  00
021E:  MOVWF  0F
021F:  BCF    03.6
0220:  CALL   162
....................    lcd_gotoxy (1, 0) ;
0221:  MOVLW  01
0222:  MOVWF  28
0223:  CLRF   29
0224:  CALL   124
....................    lcd_putc ("HO THANH LIEM");
0225:  MOVLW  09
0226:  BSF    03.6
0227:  MOVWF  0D
0228:  MOVLW  00
0229:  MOVWF  0F
022A:  BCF    03.6
022B:  CALL   162
....................    phut = 0;
022C:  CLRF   20
....................    giay = 0;
022D:  CLRF   21
.................... 
....................    while (true)
....................    {
....................       lcd_hienthi ();
022E:  GOTO   1CD
....................       delay_ms (1000);
022F:  MOVLW  04
0230:  MOVWF  24
0231:  MOVLW  FA
0232:  MOVWF  29
0233:  CALL   010
0234:  DECFSZ 24,F
0235:  GOTO   231
....................       giay++;
0236:  INCF   21,F
.................... 
....................       if (giay == 60)
0237:  MOVF   21,W
0238:  SUBLW  3C
0239:  BTFSS  03.2
023A:  GOTO   241
....................       {
....................          giay = 0;
023B:  CLRF   21
....................          phut++;
023C:  INCF   20,F
....................          if (phut == 60) phut = 0;
023D:  MOVF   20,W
023E:  SUBLW  3C
023F:  BTFSC  03.2
0240:  CLRF   20
....................       }
0241:  GOTO   22E
....................    }
.................... }
.................... 
0242:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
