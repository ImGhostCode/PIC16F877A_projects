CCS PCM C Compiler, Version 5.115, 43599               13-Mar-25 11:27

               Filename:   D:\Embedded\Projects\PIC16F877A\Turn on off reverse led using button\main.lst

               ROM used:   95 words (1%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           7 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   032
0003:  NOP
.................... #include <main.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=6000000)
.................... 
.................... 
.................... #fuses hs, nowdt, put, noprotect, nolvp
.................... #use delay(clock=6MHz)
*
000B:  MOVLW  21
000C:  MOVWF  04
000D:  BCF    03.7
000E:  MOVF   00,W
000F:  BTFSC  03.2
0010:  GOTO   01F
0011:  MOVLW  01
0012:  MOVWF  78
0013:  CLRF   77
0014:  DECFSZ 77,F
0015:  GOTO   014
0016:  DECFSZ 78,F
0017:  GOTO   013
0018:  MOVLW  F1
0019:  MOVWF  77
001A:  DECFSZ 77,F
001B:  GOTO   01A
001C:  NOP
001D:  DECFSZ 00,F
001E:  GOTO   011
.................... 
.................... #define on PIN_B0
.................... #define off PIN_B1
.................... #define inv PIN_B2
.................... 
.................... unsigned int8 d=0;
.................... 
.................... void chongdoi_inv() 
.................... {
....................    if (!input (inv))
*
0004:  BSF    03.5
0005:  BSF    06.2
0006:  BCF    03.5
0007:  BTFSC  06.2
0008:  GOTO   02F
....................    {
....................       delay_ms (20);
0009:  MOVLW  14
000A:  MOVWF  21
.................... 
....................       if ( ! input (inv))
*
001F:  BSF    03.5
0020:  BSF    06.2
0021:  BCF    03.5
0022:  BTFSC  06.2
0023:  GOTO   02F
....................       {
....................          d = ~d;
0024:  COMF   20,F
....................          output_d (d);
0025:  BSF    03.5
0026:  CLRF   08
0027:  BCF    03.5
0028:  MOVF   20,W
0029:  MOVWF  08
....................          while ( ! input (inv)) ;
002A:  BSF    03.5
002B:  BSF    06.2
002C:  BCF    03.5
002D:  BTFSS  06.2
002E:  GOTO   02A
....................       }
....................    }
002F:  BCF    0A.3
0030:  BCF    0A.4
0031:  GOTO   057 (RETURN)
.................... }
.................... 
.................... void main()
0032:  MOVF   03,W
0033:  ANDLW  1F
0034:  MOVWF  03
0035:  CLRF   20
0036:  BSF    03.5
0037:  BSF    1F.0
0038:  BSF    1F.1
0039:  BSF    1F.2
003A:  BCF    1F.3
003B:  MOVLW  07
003C:  MOVWF  1C
003D:  BCF    03.7
.................... {
....................    set_tris_b (0x07);
003E:  MOVLW  07
003F:  MOVWF  06
....................    set_tris_d (0x00);
0040:  MOVLW  00
0041:  MOVWF  08
.................... 
....................    while (TRUE)
....................    {
....................       d = 0xff;
0042:  MOVLW  FF
0043:  BCF    03.5
0044:  MOVWF  20
....................       output_d (d);
0045:  BSF    03.5
0046:  CLRF   08
0047:  BCF    03.5
0048:  MOVF   20,W
0049:  MOVWF  08
....................       while (input (on)) ;
004A:  BSF    03.5
004B:  BSF    06.0
004C:  BCF    03.5
004D:  BTFSC  06.0
004E:  GOTO   04A
....................       d = 0xf0;
004F:  MOVLW  F0
0050:  MOVWF  20
....................       output_d (d);
0051:  BSF    03.5
0052:  CLRF   08
0053:  BCF    03.5
0054:  MOVF   20,W
0055:  MOVWF  08
.................... 
....................       do
....................       {
....................          chongdoi_inv ();
0056:  GOTO   004
....................       } while (input (off));
0057:  BSF    03.5
0058:  BSF    06.1
0059:  BCF    03.5
005A:  BTFSC  06.1
005B:  GOTO   056
005C:  BSF    03.5
005D:  GOTO   042
....................    }
.................... }
.................... 
005E:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
