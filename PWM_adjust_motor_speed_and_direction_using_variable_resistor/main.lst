CCS PCM C Compiler, Version 5.115, 43599               01-Apr-25 11:06

               Filename:   D:\Embedded\Projects\PIC16F877A\PWM Adjust motor speed and direction using variable resistor\main.lst

               ROM used:   1049 words (13%)
                           Largest free fragment is 2048
               RAM used:   32 (9%) at main() level
                           46 (12%) worst case
               Stack used: 7 locations (5 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   394
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.3
0028:  GOTO   02B
0029:  BTFSC  0B.0
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   082
.................... 
.................... #include <main.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
004F:  BCF    0A.0
0050:  BCF    0A.1
0051:  BCF    0A.2
0052:  ADDWF  02,F
0053:  RETLW  50
0054:  RETLW  49
0055:  RETLW  43
0056:  RETLW  31
0057:  RETLW  36
0058:  RETLW  46
0059:  RETLW  38
005A:  RETLW  37
005B:  RETLW  37
005C:  RETLW  41
005D:  RETLW  00
005E:  BCF    0A.0
005F:  BCF    0A.1
0060:  BCF    0A.2
0061:  ADDWF  02,F
0062:  RETLW  44
0063:  RETLW  4B
0064:  RETLW  20
0065:  RETLW  54
0066:  RETLW  44
0067:  RETLW  4F
0068:  RETLW  20
0069:  RETLW  44
006A:  RETLW  43
006B:  RETLW  4F
006C:  RETLW  3A
006D:  RETLW  00
*
00A5:  DATA C6,37
00A6:  DATA F2,3B
00A7:  DATA 00,00
00A8:  DATA 53,3A
00A9:  DATA 6F,38
00AA:  DATA 00,01
00AB:  DATA 50,39
00AC:  DATA 65,3B
00AD:  DATA 00,00
*
0207:  MOVF   0B,W
0208:  MOVWF  3A
0209:  BCF    0B.7
020A:  BSF    03.5
020B:  BSF    03.6
020C:  BSF    0C.7
020D:  BSF    0C.0
020E:  NOP
020F:  NOP
0210:  BCF    03.5
0211:  BCF    03.6
0212:  BTFSC  3A.7
0213:  BSF    0B.7
0214:  BSF    03.6
0215:  MOVF   0C,W
0216:  ANDLW  7F
0217:  BTFSC  03.2
0218:  GOTO   25B
0219:  BCF    03.6
021A:  MOVWF  3A
021B:  BSF    03.6
021C:  MOVF   0D,W
021D:  BCF    03.6
021E:  MOVWF  3B
021F:  BSF    03.6
0220:  MOVF   0F,W
0221:  BCF    03.6
0222:  MOVWF  3C
0223:  MOVF   3A,W
0224:  MOVWF  3D
0225:  CALL   1D5
0226:  MOVF   3B,W
0227:  BSF    03.6
0228:  MOVWF  0D
0229:  BCF    03.6
022A:  MOVF   3C,W
022B:  BSF    03.6
022C:  MOVWF  0F
022D:  BCF    03.6
022E:  MOVF   0B,W
022F:  MOVWF  3D
0230:  BCF    0B.7
0231:  BSF    03.5
0232:  BSF    03.6
0233:  BSF    0C.7
0234:  BSF    0C.0
0235:  NOP
0236:  NOP
0237:  BCF    03.5
0238:  BCF    03.6
0239:  BTFSC  3D.7
023A:  BSF    0B.7
023B:  BSF    03.6
023C:  RLF    0C,W
023D:  RLF    0E,W
023E:  ANDLW  7F
023F:  BTFSC  03.2
0240:  GOTO   25B
0241:  BCF    03.6
0242:  MOVWF  3A
0243:  BSF    03.6
0244:  MOVF   0D,W
0245:  BCF    03.6
0246:  MOVWF  3B
0247:  BSF    03.6
0248:  MOVF   0F,W
0249:  BCF    03.6
024A:  MOVWF  3C
024B:  MOVF   3A,W
024C:  MOVWF  3D
024D:  CALL   1D5
024E:  MOVF   3B,W
024F:  BSF    03.6
0250:  MOVWF  0D
0251:  BCF    03.6
0252:  MOVF   3C,W
0253:  BSF    03.6
0254:  MOVWF  0F
0255:  INCF   0D,F
0256:  BTFSC  03.2
0257:  INCF   0F,F
0258:  BCF    03.6
0259:  GOTO   207
025A:  BSF    03.6
025B:  BCF    03.6
025C:  RETURN
*
02C6:  CLRF   78
02C7:  CLRF   79
02C8:  CLRF   77
02C9:  CLRF   7A
02CA:  MOVF   41,W
02CB:  BTFSS  03.2
02CC:  GOTO   2D0
02CD:  MOVF   40,W
02CE:  BTFSC  03.2
02CF:  GOTO   2EA
02D0:  MOVLW  10
02D1:  MOVWF  42
02D2:  BCF    03.0
02D3:  RLF    3E,F
02D4:  RLF    3F,F
02D5:  RLF    77,F
02D6:  RLF    7A,F
02D7:  MOVF   41,W
02D8:  SUBWF  7A,W
02D9:  BTFSS  03.2
02DA:  GOTO   2DD
02DB:  MOVF   40,W
02DC:  SUBWF  77,W
02DD:  BTFSS  03.0
02DE:  GOTO   2E6
02DF:  MOVF   40,W
02E0:  SUBWF  77,F
02E1:  BTFSS  03.0
02E2:  DECF   7A,F
02E3:  MOVF   41,W
02E4:  SUBWF  7A,F
02E5:  BSF    03.0
02E6:  RLF    78,F
02E7:  RLF    79,F
02E8:  DECFSZ 42,F
02E9:  GOTO   2D2
02EA:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=20000000)
*
006E:  MOVLW  48
006F:  MOVWF  04
0070:  BCF    03.7
0071:  MOVF   00,W
0072:  BTFSC  03.2
0073:  GOTO   081
0074:  MOVLW  06
0075:  MOVWF  78
0076:  CLRF   77
0077:  DECFSZ 77,F
0078:  GOTO   077
0079:  DECFSZ 78,F
007A:  GOTO   076
007B:  MOVLW  7B
007C:  MOVWF  77
007D:  DECFSZ 77,F
007E:  GOTO   07D
007F:  DECFSZ 00,F
0080:  GOTO   074
0081:  RETURN
.................... 
.................... 
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP 
.................... #define LCD_ENABLE_PIN  PIN_A3
.................... #define LCD_RS_PIN      PIN_A5
.................... #define LCD_RW_PIN      PIN_A4
.................... #define LCD_DATA4       PIN_D4
.................... #define LCD_DATA5       PIN_D5
.................... #define LCD_DATA6       PIN_D6
.................... #define LCD_DATA7       PIN_D7 
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
0115:  BSF    08.4
....................    output_float(LCD_DATA5);
0116:  BSF    08.5
....................    output_float(LCD_DATA6);
0117:  BSF    08.6
....................    output_float(LCD_DATA7);
0118:  BSF    08.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0119:  BCF    03.5
011A:  BSF    05.4
011B:  BSF    03.5
011C:  BCF    05.4
....................    delay_cycles(1);
011D:  NOP
....................    lcd_output_enable(1);
011E:  BCF    03.5
011F:  BSF    05.3
0120:  BSF    03.5
0121:  BCF    05.3
....................    delay_cycles(1);
0122:  NOP
....................    high = lcd_read_nibble();
0123:  BCF    03.5
0124:  CALL   0DC
0125:  MOVF   78,W
0126:  MOVWF  45
....................       
....................    lcd_output_enable(0);
0127:  BCF    05.3
0128:  BSF    03.5
0129:  BCF    05.3
....................    delay_cycles(1);
012A:  NOP
....................    lcd_output_enable(1);
012B:  BCF    03.5
012C:  BSF    05.3
012D:  BSF    03.5
012E:  BCF    05.3
....................    delay_us(1);
012F:  GOTO   130
0130:  GOTO   131
0131:  NOP
....................    low = lcd_read_nibble();
0132:  BCF    03.5
0133:  CALL   0DC
0134:  MOVF   78,W
0135:  MOVWF  44
....................       
....................    lcd_output_enable(0);
0136:  BCF    05.3
0137:  BSF    03.5
0138:  BCF    05.3
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
0139:  BCF    08.4
....................    output_drive(LCD_DATA5);
013A:  BCF    08.5
....................    output_drive(LCD_DATA6);
013B:  BCF    08.6
....................    output_drive(LCD_DATA7);
013C:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
013D:  BCF    03.5
013E:  SWAPF  45,W
013F:  MOVWF  77
0140:  MOVLW  F0
0141:  ANDWF  77,F
0142:  MOVF   77,W
0143:  IORWF  44,W
0144:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
00DC:  CLRF   46
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
00DD:  BSF    03.5
00DE:  BSF    08.4
00DF:  MOVLW  00
00E0:  BCF    03.5
00E1:  BTFSC  08.4
00E2:  MOVLW  01
00E3:  IORWF  46,F
....................    n |= input(LCD_DATA5) << 1;
00E4:  BSF    03.5
00E5:  BSF    08.5
00E6:  MOVLW  00
00E7:  BCF    03.5
00E8:  BTFSC  08.5
00E9:  MOVLW  01
00EA:  MOVWF  77
00EB:  BCF    03.0
00EC:  RLF    77,F
00ED:  MOVF   77,W
00EE:  IORWF  46,F
....................    n |= input(LCD_DATA6) << 2;
00EF:  BSF    03.5
00F0:  BSF    08.6
00F1:  MOVLW  00
00F2:  BCF    03.5
00F3:  BTFSC  08.6
00F4:  MOVLW  01
00F5:  MOVWF  77
00F6:  RLF    77,F
00F7:  RLF    77,F
00F8:  MOVLW  FC
00F9:  ANDWF  77,F
00FA:  MOVF   77,W
00FB:  IORWF  46,F
....................    n |= input(LCD_DATA7) << 3;
00FC:  BSF    03.5
00FD:  BSF    08.7
00FE:  MOVLW  00
00FF:  BCF    03.5
0100:  BTFSC  08.7
0101:  MOVLW  01
0102:  MOVWF  77
0103:  RLF    77,F
0104:  RLF    77,F
0105:  RLF    77,F
0106:  MOVLW  F8
0107:  ANDWF  77,F
0108:  MOVF   77,W
0109:  IORWF  46,F
....................    
....................    return(n);
010A:  MOVF   46,W
010B:  MOVWF  78
....................   #else
010C:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
00AE:  BTFSC  45.0
00AF:  GOTO   0B2
00B0:  BCF    08.4
00B1:  GOTO   0B3
00B2:  BSF    08.4
00B3:  BSF    03.5
00B4:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1));
00B5:  BCF    03.5
00B6:  BTFSC  45.1
00B7:  GOTO   0BA
00B8:  BCF    08.5
00B9:  GOTO   0BB
00BA:  BSF    08.5
00BB:  BSF    03.5
00BC:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2));
00BD:  BCF    03.5
00BE:  BTFSC  45.2
00BF:  GOTO   0C2
00C0:  BCF    08.6
00C1:  GOTO   0C3
00C2:  BSF    08.6
00C3:  BSF    03.5
00C4:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3));
00C5:  BCF    03.5
00C6:  BTFSC  45.3
00C7:  GOTO   0CA
00C8:  BCF    08.7
00C9:  GOTO   0CB
00CA:  BSF    08.7
00CB:  BSF    03.5
00CC:  BCF    08.7
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
00CD:  NOP
....................    lcd_output_enable(1);
00CE:  BCF    03.5
00CF:  BSF    05.3
00D0:  BSF    03.5
00D1:  BCF    05.3
....................    delay_us(2);
00D2:  MOVLW  03
00D3:  MOVWF  77
00D4:  DECFSZ 77,F
00D5:  GOTO   0D4
....................    lcd_output_enable(0);
00D6:  BCF    03.5
00D7:  BCF    05.3
00D8:  BSF    03.5
00D9:  BCF    05.3
00DA:  BCF    03.5
00DB:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
010D:  BSF    03.5
010E:  BCF    05.3
....................    lcd_rs_tris();
010F:  BCF    05.5
....................    lcd_rw_tris();
0110:  BCF    05.4
....................   #endif
.................... 
....................    lcd_output_rs(0);
0111:  BCF    03.5
0112:  BCF    05.5
0113:  BSF    03.5
0114:  BCF    05.5
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0145:  MOVF   78,W
0146:  MOVWF  44
0147:  BTFSS  44.7
0148:  GOTO   14B
0149:  BSF    03.5
014A:  GOTO   115
....................    lcd_output_rs(address);
014B:  MOVF   42,F
014C:  BTFSS  03.2
014D:  GOTO   150
014E:  BCF    05.5
014F:  GOTO   151
0150:  BSF    05.5
0151:  BSF    03.5
0152:  BCF    05.5
....................    delay_cycles(1);
0153:  NOP
....................    lcd_output_rw(0);
0154:  BCF    03.5
0155:  BCF    05.4
0156:  BSF    03.5
0157:  BCF    05.4
....................    delay_cycles(1);
0158:  NOP
....................    lcd_output_enable(0);
0159:  BCF    03.5
015A:  BCF    05.3
015B:  BSF    03.5
015C:  BCF    05.3
....................    lcd_send_nibble(n >> 4);
015D:  BCF    03.5
015E:  SWAPF  43,W
015F:  MOVWF  44
0160:  MOVLW  0F
0161:  ANDWF  44,F
0162:  MOVF   44,W
0163:  MOVWF  45
0164:  CALL   0AE
....................    lcd_send_nibble(n & 0xf);
0165:  MOVF   43,W
0166:  ANDLW  0F
0167:  MOVWF  44
0168:  MOVWF  45
0169:  CALL   0AE
016A:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
016B:  MOVLW  28
016C:  MOVWF  3B
016D:  MOVLW  0C
016E:  MOVWF  3C
016F:  MOVLW  01
0170:  MOVWF  3D
0171:  MOVLW  06
0172:  MOVWF  3E
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0173:  BCF    05.3
0174:  BSF    03.5
0175:  BCF    05.3
....................    lcd_output_rs(0);
0176:  BCF    03.5
0177:  BCF    05.5
0178:  BSF    03.5
0179:  BCF    05.5
....................    lcd_output_rw(0);
017A:  BCF    03.5
017B:  BCF    05.4
017C:  BSF    03.5
017D:  BCF    05.4
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
017E:  BCF    08.4
....................    output_drive(LCD_DATA5);
017F:  BCF    08.5
....................    output_drive(LCD_DATA6);
0180:  BCF    08.6
....................    output_drive(LCD_DATA7);
0181:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
0182:  BCF    05.3
....................    lcd_rs_tris();
0183:  BCF    05.5
....................    lcd_rw_tris();
0184:  BCF    05.4
0185:  BCF    03.5
0186:  CLRF   2B
0187:  BTFSC  0B.7
0188:  BSF    2B.7
0189:  BCF    0B.7
....................  #endif
....................     
....................    delay_ms(15);
018A:  MOVLW  0F
018B:  MOVWF  48
018C:  CALL   06E
018D:  BTFSC  2B.7
018E:  BSF    0B.7
....................    for(i=1;i<=3;++i)
018F:  MOVLW  01
0190:  MOVWF  3A
0191:  MOVF   3A,W
0192:  SUBLW  03
0193:  BTFSS  03.0
0194:  GOTO   1A3
....................    {
....................        lcd_send_nibble(3);
0195:  MOVLW  03
0196:  MOVWF  45
0197:  CALL   0AE
0198:  CLRF   2B
0199:  BTFSC  0B.7
019A:  BSF    2B.7
019B:  BCF    0B.7
....................        delay_ms(5);
019C:  MOVLW  05
019D:  MOVWF  48
019E:  CALL   06E
019F:  BTFSC  2B.7
01A0:  BSF    0B.7
01A1:  INCF   3A,F
01A2:  GOTO   191
....................    }
....................    
....................    lcd_send_nibble(2);
01A3:  MOVLW  02
01A4:  MOVWF  45
01A5:  CALL   0AE
01A6:  CLRF   2B
01A7:  BTFSC  0B.7
01A8:  BSF    2B.7
01A9:  BCF    0B.7
....................    delay_ms(5);
01AA:  MOVLW  05
01AB:  MOVWF  48
01AC:  CALL   06E
01AD:  BTFSC  2B.7
01AE:  BSF    0B.7
....................    for(i=0;i<=3;++i)
01AF:  CLRF   3A
01B0:  MOVF   3A,W
01B1:  SUBLW  03
01B2:  BTFSS  03.0
01B3:  GOTO   1C0
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
01B4:  MOVLW  3B
01B5:  ADDWF  3A,W
01B6:  MOVWF  04
01B7:  BCF    03.7
01B8:  MOVF   00,W
01B9:  MOVWF  3F
01BA:  CLRF   42
01BB:  MOVF   3F,W
01BC:  MOVWF  43
01BD:  CALL   10D
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
01BE:  INCF   3A,F
01BF:  GOTO   1B0
01C0:  BCF    0A.3
01C1:  BCF    0A.4
01C2:  GOTO   3F0 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
01C3:  DECFSZ 3F,W
01C4:  GOTO   1C6
01C5:  GOTO   1C9
....................       address=LCD_LINE_TWO;
01C6:  MOVLW  40
01C7:  MOVWF  40
01C8:  GOTO   1CA
....................    else
....................       address=0;
01C9:  CLRF   40
....................      
....................    address+=x-1;
01CA:  MOVLW  01
01CB:  SUBWF  3E,W
01CC:  ADDWF  40,F
....................    lcd_send_byte(0,0x80|address);
01CD:  MOVF   40,W
01CE:  IORLW  80
01CF:  MOVWF  41
01D0:  CLRF   42
01D1:  MOVF   41,W
01D2:  MOVWF  43
01D3:  CALL   10D
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
01D4:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
01D5:  MOVF   3D,W
01D6:  XORLW  07
01D7:  BTFSC  03.2
01D8:  GOTO   1E3
01D9:  XORLW  0B
01DA:  BTFSC  03.2
01DB:  GOTO   1E8
01DC:  XORLW  06
01DD:  BTFSC  03.2
01DE:  GOTO   1F6
01DF:  XORLW  02
01E0:  BTFSC  03.2
01E1:  GOTO   1FC
01E2:  GOTO   201
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
01E3:  MOVLW  01
01E4:  MOVWF  3E
01E5:  MOVWF  3F
01E6:  CALL   1C3
01E7:  GOTO   206
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
01E8:  CLRF   42
01E9:  MOVLW  01
01EA:  MOVWF  43
01EB:  CALL   10D
01EC:  CLRF   2B
01ED:  BTFSC  0B.7
01EE:  BSF    2B.7
01EF:  BCF    0B.7
....................                      delay_ms(2);
01F0:  MOVLW  02
01F1:  MOVWF  48
01F2:  CALL   06E
01F3:  BTFSC  2B.7
01F4:  BSF    0B.7
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
01F5:  GOTO   206
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
01F6:  MOVLW  01
01F7:  MOVWF  3E
01F8:  MOVLW  02
01F9:  MOVWF  3F
01FA:  CALL   1C3
01FB:  GOTO   206
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
01FC:  CLRF   42
01FD:  MOVLW  10
01FE:  MOVWF  43
01FF:  CALL   10D
0200:  GOTO   206
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0201:  MOVLW  01
0202:  MOVWF  42
0203:  MOVF   3D,W
0204:  MOVWF  43
0205:  CALL   10D
....................      #endif
....................    }
0206:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... #define forw PIN_B5
.................... #define stop PIN_B6
.................... #define revs PIN_B7
.................... #define solando 10
.................... 
.................... unsigned int j, mp,ht, ma_ng, ma_tr, ma_ch, ma_dv;
.................... unsigned int16 vr, capdo;
.................... const unsigned int lcd_h0[] ={"PIC16F877A"};
.................... const unsigned int lcd_h1[] = {"DK TDO DCO:"};
.................... #int_RB
.................... void rb_isr(void)
.................... {
....................    delay_ms(50);
*
0082:  MOVLW  32
0083:  MOVWF  48
0084:  CALL   06E
.................... 
....................    if (!input (forw))
0085:  BSF    03.5
0086:  BSF    06.5
0087:  BCF    03.5
0088:  BTFSC  06.5
0089:  GOTO   08D
....................    {
....................       mp = 0;
008A:  CLRF   2D
....................       ht = 0;
008B:  CLRF   2E
....................    }
008C:  GOTO   09E
.................... 
....................    else if (!input (stop))
008D:  BSF    03.5
008E:  BSF    06.6
008F:  BCF    03.5
0090:  BTFSC  06.6
0091:  GOTO   096
....................    {
....................       mp = 1;
0092:  MOVLW  01
0093:  MOVWF  2D
....................       ht = 1;
0094:  MOVWF  2E
....................    }
0095:  GOTO   09E
.................... 
....................    else if (!input (revs))
0096:  BSF    03.5
0097:  BSF    06.7
0098:  BCF    03.5
0099:  BTFSC  06.7
009A:  GOTO   09E
....................    {
....................       mp = 2;
009B:  MOVLW  02
009C:  MOVWF  2D
....................       ht = 2;
009D:  MOVWF  2E
....................    };
.................... 
....................    clear_interrupt (int_RB) ;
009E:  MOVF   06,W
009F:  NOP
00A0:  BCF    0B.0
00A1:  BCF    0B.0
00A2:  BCF    0A.3
00A3:  BCF    0A.4
00A4:  GOTO   02B
.................... }
.................... 
.................... void giaima_capdo_4so_xvn(unsigned int16 x) 
.................... {
....................    ma_dv = x % 10 + 0x30;
*
0314:  MOVF   3B,W
0315:  MOVWF  3F
0316:  MOVF   3A,W
0317:  MOVWF  3E
0318:  CLRF   41
0319:  MOVLW  0A
031A:  MOVWF  40
031B:  CALL   2C6
031C:  MOVLW  30
031D:  ADDWF  77,W
031E:  MOVWF  32
....................    ma_ch = x / 10 % 10 + 0x30;
031F:  MOVF   3B,W
0320:  MOVWF  3F
0321:  MOVF   3A,W
0322:  MOVWF  3E
0323:  CLRF   41
0324:  MOVLW  0A
0325:  MOVWF  40
0326:  CALL   2C6
0327:  MOVF   79,W
0328:  MOVWF  3D
0329:  MOVF   78,W
032A:  MOVWF  3C
032B:  MOVF   79,W
032C:  MOVWF  3F
032D:  MOVF   78,W
032E:  MOVWF  3E
032F:  CLRF   41
0330:  MOVLW  0A
0331:  MOVWF  40
0332:  CALL   2C6
0333:  MOVLW  30
0334:  ADDWF  77,W
0335:  MOVWF  31
....................    ma_tr = x / 100 % 10 + 0x30;
0336:  MOVF   3B,W
0337:  MOVWF  3F
0338:  MOVF   3A,W
0339:  MOVWF  3E
033A:  CLRF   41
033B:  MOVLW  64
033C:  MOVWF  40
033D:  CALL   2C6
033E:  MOVF   79,W
033F:  MOVWF  3D
0340:  MOVF   78,W
0341:  MOVWF  3C
0342:  MOVF   79,W
0343:  MOVWF  3F
0344:  MOVF   78,W
0345:  MOVWF  3E
0346:  CLRF   41
0347:  MOVLW  0A
0348:  MOVWF  40
0349:  CALL   2C6
034A:  MOVLW  30
034B:  ADDWF  77,W
034C:  MOVWF  30
....................    ma_ng = x / 1000 % 10 + 0x30;
034D:  MOVF   3B,W
034E:  MOVWF  3F
034F:  MOVF   3A,W
0350:  MOVWF  3E
0351:  MOVLW  03
0352:  MOVWF  41
0353:  MOVLW  E8
0354:  MOVWF  40
0355:  CALL   2C6
0356:  MOVF   79,W
0357:  MOVWF  3D
0358:  MOVF   78,W
0359:  MOVWF  3C
035A:  MOVF   79,W
035B:  MOVWF  3F
035C:  MOVF   78,W
035D:  MOVWF  3E
035E:  CLRF   41
035F:  MOVLW  0A
0360:  MOVWF  40
0361:  CALL   2C6
0362:  MOVLW  30
0363:  ADDWF  77,W
0364:  MOVWF  2F
....................    
....................    if (ma_ng == 0x30)
0365:  MOVF   2F,W
0366:  SUBLW  30
0367:  BTFSS  03.2
0368:  GOTO   377
....................    {
....................       ma_ng = ' ';
0369:  MOVLW  20
036A:  MOVWF  2F
.................... 
....................       if (ma_tr == 0x30)
036B:  MOVF   30,W
036C:  SUBLW  30
036D:  BTFSS  03.2
036E:  GOTO   377
....................       {
....................          ma_tr = ' ';
036F:  MOVLW  20
0370:  MOVWF  30
....................          if (ma_ch == 0x30) ma_ch = ' ';
0371:  MOVF   31,W
0372:  SUBLW  30
0373:  BTFSS  03.2
0374:  GOTO   377
0375:  MOVLW  20
0376:  MOVWF  31
....................       }
....................    }
.................... }
.................... 
.................... void lcd_hien_thi_3_che_do() 
.................... {
....................    if (ht == 0)
*
025D:  MOVF   2E,F
025E:  BTFSS  03.2
025F:  GOTO   26C
....................    {
....................       lcd_gotoxy (12, 0) ;
0260:  MOVLW  0C
0261:  MOVWF  3E
0262:  CLRF   3F
0263:  CALL   1C3
....................       lcd_putc ("Forw");
0264:  MOVLW  A5
0265:  BSF    03.6
0266:  MOVWF  0D
0267:  MOVLW  00
0268:  MOVWF  0F
0269:  BCF    03.6
026A:  CALL   207
....................       
....................       } else if (ht == 1){
026B:  GOTO   289
026C:  DECFSZ 2E,W
026D:  GOTO   27A
....................       lcd_gotoxy (12, 0) ;
026E:  MOVLW  0C
026F:  MOVWF  3E
0270:  CLRF   3F
0271:  CALL   1C3
....................       lcd_putc ("Stop");
0272:  MOVLW  A8
0273:  BSF    03.6
0274:  MOVWF  0D
0275:  MOVLW  00
0276:  MOVWF  0F
0277:  BCF    03.6
0278:  CALL   207
....................    } else
0279:  GOTO   289
.................... 
....................    if (ht == 2)
027A:  MOVF   2E,W
027B:  SUBLW  02
027C:  BTFSS  03.2
027D:  GOTO   289
....................    {
....................       lcd_gotoxy (12, 0) ;
027E:  MOVLW  0C
027F:  MOVWF  3E
0280:  CLRF   3F
0281:  CALL   1C3
....................       lcd_putc ("Prev");
0282:  MOVLW  AB
0283:  BSF    03.6
0284:  MOVWF  0D
0285:  MOVLW  00
0286:  MOVWF  0F
0287:  BCF    03.6
0288:  CALL   207
....................    }
.................... 
....................    ht = 3;
0289:  MOVLW  03
028A:  MOVWF  2E
028B:  BCF    0A.3
028C:  BCF    0A.4
028D:  GOTO   414 (RETURN)
.................... }
.................... 
.................... void lcd_hienthi_capdo() 
.................... {
....................    lcd_gotoxy (12, 1) ;
*
0377:  MOVLW  0C
0378:  MOVWF  3E
0379:  MOVLW  01
037A:  MOVWF  3F
037B:  CALL   1C3
....................    lcd_putc (ma_ng) ;
037C:  MOVF   2F,W
037D:  MOVWF  3D
037E:  CALL   1D5
....................    lcd_putc (ma_tr) ;
037F:  MOVF   30,W
0380:  MOVWF  3D
0381:  CALL   1D5
....................    lcd_putc (ma_ch) ;
0382:  MOVF   31,W
0383:  MOVWF  3D
0384:  CALL   1D5
....................    lcd_putc (ma_dv) ;
0385:  MOVF   32,W
0386:  MOVWF  3D
0387:  CALL   1D5
0388:  CLRF   2B
0389:  BTFSC  0B.7
038A:  BSF    2B.7
038B:  BCF    0B.7
.................... }
.................... 
.................... void doc_hthi_bien_tro() 
.................... {
....................    vr = 0;
*
02EB:  CLRF   34
02EC:  CLRF   33
....................    for (j = 0; j < solando; j++)
02ED:  CLRF   2C
02EE:  MOVF   2C,W
02EF:  SUBLW  09
02F0:  BTFSS  03.0
02F1:  GOTO   300
....................    {
....................       vr = vr + read_adc (ADC_READ_ONLY);
02F2:  BTFSC  1F.2
02F3:  GOTO   2F2
02F4:  MOVF   1E,W
02F5:  MOVWF  79
02F6:  BSF    03.5
02F7:  MOVF   1E,W
02F8:  BCF    03.5
02F9:  ADDWF  33,F
02FA:  MOVF   79,W
02FB:  BTFSC  03.0
02FC:  INCFSZ 79,W
02FD:  ADDWF  34,F
02FE:  INCF   2C,F
02FF:  GOTO   2EE
....................    }
.................... 
....................    vr = vr / solando;
0300:  MOVF   34,W
0301:  MOVWF  3F
0302:  MOVF   33,W
0303:  MOVWF  3E
0304:  CLRF   41
0305:  MOVLW  0A
0306:  MOVWF  40
0307:  CALL   2C6
0308:  MOVF   79,W
0309:  MOVWF  34
030A:  MOVF   78,W
030B:  MOVWF  33
....................    capdo = vr;
030C:  MOVF   34,W
030D:  MOVWF  36
030E:  MOVF   33,W
030F:  MOVWF  35
....................    giaima_capdo_4so_xvn (capdo);
0310:  MOVF   36,W
0311:  MOVWF  3B
0312:  MOVF   35,W
0313:  MOVWF  3A
....................    lcd_hienthi_capdo () ;
....................    delay_ms (20);
*
038C:  MOVLW  14
038D:  MOVWF  48
038E:  CALL   06E
038F:  BTFSC  2B.7
0390:  BSF    0B.7
0391:  BCF    0A.3
0392:  BCF    0A.4
0393:  GOTO   417 (RETURN)
.................... }
.................... 
.................... void xu_ly_3_che_do()
.................... {
....................    if (mp == 0)
*
028E:  MOVF   2D,F
028F:  BTFSS  03.2
0290:  GOTO   2A6
....................    {
....................       set_pwm2_duty (0);
0291:  CLRF   1B
....................       set_pwm1_duty (capdo);
0292:  MOVF   36,W
0293:  MOVWF  79
0294:  MOVF   35,W
0295:  MOVWF  78
0296:  RRF    79,F
0297:  RRF    78,F
0298:  RRF    79,F
0299:  RRF    78,F
029A:  RRF    79,F
029B:  MOVF   78,W
029C:  MOVWF  15
029D:  RRF    79,F
029E:  RRF    79,W
029F:  ANDLW  30
02A0:  MOVWF  77
02A1:  MOVF   17,W
02A2:  ANDLW  CF
02A3:  IORWF  77,W
02A4:  MOVWF  17
....................    } else if (mp == 1)
02A5:  GOTO   2C3
02A6:  DECFSZ 2D,W
02A7:  GOTO   2AB
.................... 
....................    {
....................    set_pwm1_duty (0);
02A8:  CLRF   15
....................    set_pwm2_duty (0);
02A9:  CLRF   1B
....................    } else if (mp == 2)
02AA:  GOTO   2C3
02AB:  MOVF   2D,W
02AC:  SUBLW  02
02AD:  BTFSS  03.2
02AE:  GOTO   2C3
.................... 
....................    {
....................    set_pwm1_duty (0);
02AF:  CLRF   15
....................    set_pwm2_duty (capdo);
02B0:  MOVF   36,W
02B1:  MOVWF  79
02B2:  MOVF   35,W
02B3:  MOVWF  78
02B4:  RRF    79,F
02B5:  RRF    78,F
02B6:  RRF    79,F
02B7:  RRF    78,F
02B8:  RRF    79,F
02B9:  MOVF   78,W
02BA:  MOVWF  1B
02BB:  RRF    79,F
02BC:  RRF    79,W
02BD:  ANDLW  30
02BE:  MOVWF  77
02BF:  MOVF   1D,W
02C0:  ANDLW  CF
02C1:  IORWF  77,W
02C2:  MOVWF  1D
....................    }
02C3:  BCF    0A.3
02C4:  BCF    0A.4
02C5:  GOTO   415 (RETURN)
.................... }
.................... 
.................... void main()
*
0394:  MOVF   03,W
0395:  ANDLW  1F
0396:  MOVWF  03
0397:  CLRF   38
0398:  CLRF   37
0399:  MOVLW  FF
039A:  MOVWF  39
039B:  BSF    03.5
039C:  BSF    1F.0
039D:  BSF    1F.1
039E:  BSF    1F.2
039F:  BCF    1F.3
03A0:  MOVLW  07
03A1:  MOVWF  1C
03A2:  BCF    03.7
.................... {
....................    set_tris_a (0x04);
03A3:  MOVLW  04
03A4:  MOVWF  05
....................    set_tris_b (0xff);
03A5:  MOVLW  FF
03A6:  MOVWF  06
....................    set_tris_c (0x00);
03A7:  MOVLW  00
03A8:  MOVWF  07
03A9:  BCF    03.5
03AA:  MOVWF  39
....................    set_tris_d (0x00);
03AB:  BSF    03.5
03AC:  MOVWF  08
....................    clear_interrupt(int_RB);        // Clear PORTB IOC flag bit
03AD:  BCF    03.5
03AE:  MOVF   06,W
03AF:  NOP
03B0:  BCF    0B.0
....................    enable_interrupts(int_RB);      // Enable PORTB IOC
03B1:  BSF    0B.3
....................    enable_interrupts(GLOBAL);      // Enable global interrupts
03B2:  MOVLW  C0
03B3:  IORWF  0B,F
....................    port_b_pullups (0xff);
03B4:  BSF    03.5
03B5:  BCF    01.7
....................    
....................    output_high (PIN_C0);
03B6:  BCF    03.5
03B7:  BCF    39.0
03B8:  MOVF   39,W
03B9:  BSF    03.5
03BA:  MOVWF  07
03BB:  BCF    03.5
03BC:  BSF    07.0
....................    setup_ccp1 (CCP_PWM);
03BD:  BCF    39.2
03BE:  MOVF   39,W
03BF:  BSF    03.5
03C0:  MOVWF  07
03C1:  BCF    03.5
03C2:  BCF    07.2
03C3:  MOVLW  0C
03C4:  MOVWF  17
....................    setup_ccp2 (CCP_PWM);
03C5:  BCF    39.1
03C6:  MOVF   39,W
03C7:  BSF    03.5
03C8:  MOVWF  07
03C9:  BCF    03.5
03CA:  BCF    07.1
03CB:  MOVLW  0C
03CC:  MOVWF  1D
....................    setup_timer_2 (T2_DIV_BY_16, 249, 1);
03CD:  MOVLW  00
03CE:  MOVWF  78
03CF:  IORLW  06
03D0:  MOVWF  12
03D1:  MOVLW  F9
03D2:  BSF    03.5
03D3:  MOVWF  12
....................    set_pwm1_duty (0);
03D4:  BCF    03.5
03D5:  CLRF   15
....................    set_pwm2_duty (0);
03D6:  CLRF   1B
....................    
....................    setup_adc (ADC_CLOCK_DIV_8);
03D7:  BSF    03.5
03D8:  BCF    1F.6
03D9:  BCF    03.5
03DA:  BSF    1F.6
03DB:  BCF    1F.7
03DC:  BSF    03.5
03DD:  BSF    1F.7
03DE:  BCF    03.5
03DF:  BSF    1F.0
....................    setup_adc_ports (AN0);
03E0:  BSF    03.5
03E1:  BCF    1F.0
03E2:  BSF    1F.1
03E3:  BSF    1F.2
03E4:  BSF    1F.3
....................    set_adc_channel (0);
03E5:  MOVLW  00
03E6:  MOVWF  78
03E7:  BCF    03.5
03E8:  MOVF   1F,W
03E9:  ANDLW  C7
03EA:  IORWF  78,W
03EB:  MOVWF  1F
....................    mp = 1; ht = 1;
03EC:  MOVLW  01
03ED:  MOVWF  2D
03EE:  MOVWF  2E
....................    
....................    lcd_init ();
03EF:  GOTO   16B
....................    lcd_putc ('\f'); // Clear LCD
03F0:  MOVLW  0C
03F1:  MOVWF  3D
03F2:  CALL   1D5
....................    lcd_gotoxy (1, 1) ;
03F3:  MOVLW  01
03F4:  MOVWF  3E
03F5:  MOVWF  3F
03F6:  CALL   1C3
....................    for (j = 0; j < 10; j++) lcd_putc (lcd_h0[j]);
03F7:  CLRF   2C
03F8:  MOVF   2C,W
03F9:  SUBLW  09
03FA:  BTFSS  03.0
03FB:  GOTO   403
03FC:  MOVF   2C,W
03FD:  CALL   04F
03FE:  MOVWF  3A
03FF:  MOVWF  3D
0400:  CALL   1D5
0401:  INCF   2C,F
0402:  GOTO   3F8
....................    lcd_gotoxy (1, 0) ;
0403:  MOVLW  01
0404:  MOVWF  3E
0405:  CLRF   3F
0406:  CALL   1C3
....................    for (j = 0; j < 11; j++) lcd_putc (lcd_h1[j]);
0407:  CLRF   2C
0408:  MOVF   2C,W
0409:  SUBLW  0A
040A:  BTFSS  03.0
040B:  GOTO   413
040C:  MOVF   2C,W
040D:  CALL   05E
040E:  MOVWF  3A
040F:  MOVWF  3D
0410:  CALL   1D5
0411:  INCF   2C,F
0412:  GOTO   408
....................    while (TRUE)
....................    {
....................       lcd_hien_thi_3_che_do ();
0413:  GOTO   25D
....................       xu_ly_3_che_do ();
0414:  GOTO   28E
....................       read_adc (ADC_START_ONLY) ;
0415:  BSF    1F.2
....................       doc_hthi_bien_tro ();
0416:  GOTO   2EB
0417:  GOTO   413
....................    }
.................... }
.................... 
0418:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
